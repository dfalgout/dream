// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package db

import (
	"context"
	"time"
)

const clearAndGetVerifiedUser = `-- name: ClearAndGetVerifiedUser :one
UPDATE users
SET
    verify_code = NULL,
    verify_expires_at = NULL
WHERE
    email = ?1 AND
    verify_code = ?2 AND
    verify_expires_at > (strftime('%F %R:%f'))
RETURNING id, email, full_name, is_admin, verify_code, verify_expires_at, created_at, updated_at
`

type ClearAndGetVerifiedUserParams struct {
	Email      string
	VerifyCode *string
}

func (q *Queries) ClearAndGetVerifiedUser(ctx context.Context, arg *ClearAndGetVerifiedUserParams) (*User, error) {
	row := q.db.QueryRowContext(ctx, clearAndGetVerifiedUser, arg.Email, arg.VerifyCode)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FullName,
		&i.IsAdmin,
		&i.VerifyCode,
		&i.VerifyExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  id, email, full_name, is_admin, verify_code, verify_expires_at
) VALUES (
  ?1,
  ?2,
  ?3,
  coalesce(?4, 0),
  ?5,
  ?6
) RETURNING id, email, full_name, is_admin, verify_code, verify_expires_at, created_at, updated_at
`

type CreateUserParams struct {
	ID              string
	Email           string
	FullName        *string
	IsAdmin         interface{}
	VerifyCode      *string
	VerifyExpiresAt *time.Time
}

func (q *Queries) CreateUser(ctx context.Context, arg *CreateUserParams) (*User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.FullName,
		arg.IsAdmin,
		arg.VerifyCode,
		arg.VerifyExpiresAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FullName,
		&i.IsAdmin,
		&i.VerifyCode,
		&i.VerifyExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const deleteUser = `-- name: DeleteUser :execrows
DELETE FROM users
WHERE id = ?1
`

func (q *Queries) DeleteUser(ctx context.Context, id string) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteUser, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, full_name, is_admin, verify_code, verify_expires_at, created_at, updated_at FROM users
WHERE
    email = ?1
LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (*User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FullName,
		&i.IsAdmin,
		&i.VerifyCode,
		&i.VerifyExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, email, full_name, is_admin, verify_code, verify_expires_at, created_at, updated_at FROM users
ORDER BY created_at DESC
`

func (q *Queries) ListUsers(ctx context.Context) ([]*User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.FullName,
			&i.IsAdmin,
			&i.VerifyCode,
			&i.VerifyExpiresAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserByEmail = `-- name: UpdateUserByEmail :one
UPDATE users
SET
    full_name = coalesce(?1, full_name),
    is_admin = coalesce(?2, is_admin),
    verify_code = coalesce(?3, verify_code),
    verify_expires_at = coalesce(?4, verify_expires_at),
    updated_at = (strftime('%F %R:%f'))
WHERE
    email = ?5
RETURNING id, email, full_name, is_admin, verify_code, verify_expires_at, created_at, updated_at
`

type UpdateUserByEmailParams struct {
	FullName        *string
	IsAdmin         *bool
	VerifyCode      *string
	VerifyExpiresAt *time.Time
	Email           string
}

func (q *Queries) UpdateUserByEmail(ctx context.Context, arg *UpdateUserByEmailParams) (*User, error) {
	row := q.db.QueryRowContext(ctx, updateUserByEmail,
		arg.FullName,
		arg.IsAdmin,
		arg.VerifyCode,
		arg.VerifyExpiresAt,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FullName,
		&i.IsAdmin,
		&i.VerifyCode,
		&i.VerifyExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const updateUserById = `-- name: UpdateUserById :one
UPDATE users
SET
    email = coalesce(?1, email),
    full_name = coalesce(?2, full_name),
    is_admin = coalesce(?3, is_admin),
    verify_code = coalesce(?4, verify_code),
    verify_expires_at = coalesce(?5, verify_expires_at),
    updated_at = (strftime('%F %R:%f'))
WHERE
    id = ?6
RETURNING id, email, full_name, is_admin, verify_code, verify_expires_at, created_at, updated_at
`

type UpdateUserByIdParams struct {
	Email           *string
	FullName        *string
	IsAdmin         *bool
	VerifyCode      *string
	VerifyExpiresAt *time.Time
	ID              string
}

func (q *Queries) UpdateUserById(ctx context.Context, arg *UpdateUserByIdParams) (*User, error) {
	row := q.db.QueryRowContext(ctx, updateUserById,
		arg.Email,
		arg.FullName,
		arg.IsAdmin,
		arg.VerifyCode,
		arg.VerifyExpiresAt,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FullName,
		&i.IsAdmin,
		&i.VerifyCode,
		&i.VerifyExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
